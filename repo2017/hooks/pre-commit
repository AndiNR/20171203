#!/bin/bash
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

# Environment variables:
SCRIPT_PATH=$(dirname `readlink -f $0`)
REAL_PATH=$(git remote -v|tail -1|cut -d\: -f2|cut -d\  -f1)
PROJECT_PATH=${REAL_PATH/android\//}
# White list at vendor/sprd/external/tools-coding-syyle/WHITE_LIST.csv
WHITE_LIST=${SCRIPT_PATH/\.repo\/repo\/hooks/vendor\/sprd\/external\/tools\-coding\-style\/WHITE_LIST\.csv}
CHECK_PATTERN=$(cat ${SCRIPT_PATH/\.repo\/repo\/hooks/vendor\/sprd\/external\/tools\-coding\-style\/CHECK_PATTERN})

ifkernel=$(git remote -v|tail -1|grep -o "kernel/common")
echo "ifkernel:$ifkernel"

ifvendor_sprd=$(git remote -v|tail -1|grep -o -P "$CHECK_PATTERN")
echo "ifvendor_sprd:$ifvendor_sprd"

cpplint_check(){
  unset check_files
  while read status file;do
    # Check if src_file in the white list
    if grep -q "$PROJECT_PATH,$file" $WHITE_LIST; then
      echo "$file is in the WHITE_LIST already"
    else
      check_files="$check_files $file"
    fi
  # Cpplint a valid file name (cc, h, cpp, cu, cuh, c)
  done < <(git diff --cached --name-status --diff-filter=ACM | grep -P  '\.((c)|(cc)|(cpp)|(cu)|(cuh)|(h))$' )

  # Do the cpplint.py checks
  python .git/hooks/tools/cpplint.py \
  --filter=-whitespace/line_length,-build/include,-readability/function,-readability/streams,-readability/todo,-readability/casting,-runtime/int --counting=detailed \
  $check_files 2>&1 | tee /tmp/cpplint.$$
  # Print the stderr
  cat /tmp/cpplint.$$
  tput setaf 1
  echo ====== cpplint check completed ======
  tput sgr 0
  ifresult=$(grep -e "Category" -e "Total error" /tmp/cpplint.$$)
  rm /tmp/cpplint.$$
  # Show the repair usage only when cppling_check exit code is not zero
  if [ "$ifresult" ]; then
    tput setaf 1
    echo "$ifresult"
    echo "====== =============== ============"
    echo "Please repair these error files:"
    echo "Usage:"
    for i in $check_files;do
      echo "$SCRIPT_PATH/tools/clang-format -style=Google ${i} > ${i}.new"
    done
    tput sgr 0
  fi
}

# ifkernel do kernel coding style check
if [ "$ifkernel" ]; then
  exec git diff --cached | scripts/checkpatch.pl --no-signoff --ignore FILE_PATH_CHANGES - || true
  if [ "$?" != 0 ]; then
    tput setaf 1
    echo "                                                                   "
    echo " ----------------------------------------------------------------- "
    echo " | I'm a CodingStyle checker, please fix the errors and warnings | "
    echo " | listed above as soon as possible, because you'll no-longer    | "
    echo " | be able to commit any code with this kind of errors or        | "
    echo " | warnings some day!!!                                          | "
    echo " ----------------------------------------------------------------- "
    echo "                  \   ^__^                                         "
    echo "                   \  (@@)\_______                                 "
    echo "                      (__)\       )\/\                             "
    echo "                          ||----w |                                "
    echo "                          ||     ||                                "
    echo "                                                                   "
    tput sgr 0
  fi
# ifvendor_sprd do cpplint coding style check
elif [ "$ifvendor_sprd" ]; then
  cpplint_check
fi

